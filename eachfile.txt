Short list:

# backend/api/analyze.py: Handles /analyze endpoint logic for data analysis requests
# backend/api/upload.py: Handles /upload-documents endpoint for file uploads
# backend/api/report.py: Handles /generate-report endpoint for report generation
# backend/agents/controller_agent.py: CrewAI Controller Agent - orchestrates and decomposes tasks
# backend/agents/data_agent.py: CrewAI Data Agent - generates and executes code for structured data analysis
# backend/agents/rag_agent.py: CrewAI RAG Agent - retrieves and summarizes unstructured data from ChromaDB
# backend/agents/review_agent.py: CrewAI Review & Correction Agent - reviews and corrects generated code
# backend/agents/visualization_agent.py: CrewAI Visualization Agent - generates interactive charts using Plotly
# backend/agents/report_agent.py: CrewAI Report Agent - compiles outputs into downloadable reports
# backend/core/llm_client.py: Handles communication with local Ollama LLM server
# backend/core/sandbox.py: Secure code execution sandbox using RestrictedPython
# backend/core/chromadb_client.py: Handles ChromaDB integration for vector storage and retrieval
# backend/core/utils.py: Shared utility functions for backend
# frontend/components/FileUploader.tsx: File upload component for user documents
# frontend/components/QueryInput.tsx: Text input component for user queries
# frontend/components/ResultsDisplay.tsx: Displays results: text, tables, and charts
# frontend/components/DataTable.tsx: Renders data frames as tables
# frontend/components/Chart.tsx: Renders interactive charts using react-plotly.js
# frontend/components/DownloadReportButton.tsx: Button to download generated reports
# frontend/pages/index.tsx: Main dashboard page for the app



Detailed description:

Backend
This directory contains all the server-side logic, including the API, agents, and core utilities.

main.py: This is the FastAPI application's entry point. It will handle the server setup, mount the API routers, configure CORS settings, and serve as the central hub connecting the different backend components.

api/: This sub-directory organizes the REST API endpoints.

analyze.py: Defines the main endpoint for user queries. It will receive a natural language query from the frontend and pass it to the controller_agent to kick off the analysis workflow.

upload.py: Defines the file upload endpoint. It will accept multipart/form-data containing the CSV or JSON file, save it to the data/ directory, and potentially trigger the data ingestion process into ChromaDB.

report.py: Defines the endpoint for generating and serving the final report, likely as a PDF or Markdown file. It will receive a request to compile the results and send the generated report back to the user.

agents/: This directory is the core of your CrewAI-based workflow. Each file defines a specialized AI agent with its own role and tools.

controller_agent.py: This is the primary orchestrator. It will be the first agent to receive the user's query and will determine the necessary steps to complete the task by assigning sub-tasks to the other specialized agents.

data_agent.py: Responsible for data manipulation and analysis. It will use the sandbox.py to safely execute Python code for tasks like data cleaning, transformation, and statistical analysis.

rag_agent.py: The Retrieval-Augmented Generation agent. Its main task is to interact with the chromadb_client.py to fetch relevant data chunks or context to ground the LLM's responses, ensuring the analysis is accurate and specific to the uploaded data.

review_agent.py: Acts as a quality control layer. It will review the output from other agents (e.g., the analysis results, generated code, or report content) to ensure accuracy, consistency, and adherence to the user's request.

visualization_agent.py: Specializes in creating data visualizations. It will receive analysis results and generate the necessary code (e.g., Python code for a library like Matplotlib or Plotly) to produce charts and graphs.

report_agent.py: The final compiler. It will take the processed data, text analysis, and visualization code from the other agents and assemble them into a comprehensive, human-readable report.

core/: This directory holds the foundational services and utilities for the backend.

llm_client.py: A client library for communicating with your local Ollama instance. It will handle the API calls to the LLM for all the agents.

sandbox.py: A crucial file for security. It will contain the RestrictedPython environment, which allows the data_agent to execute dynamically generated Python code in a safe, isolated environment, preventing malicious code from affecting the system.

chromadb_client.py: A client for the ChromaDB vector database. It will manage the ingestion of uploaded document text (e.g., the contents of a CSV) and the retrieval of relevant chunks for the rag_agent.

utils.py: A general-purpose utility file for shared functions, such as data validation helpers, file handling, and other reusable logic.

Frontend
This directory contains the Next.js application, which provides the user interface.

components/: These are reusable React components for the UI.

FileUploader.tsx: A component that allows users to upload files, likely with a drag-and-drop interface and visual feedback. It will send the file to the /api/upload endpoint.

QueryInput.tsx: A component with a text area and a button for users to type and submit their natural language questions for analysis.

ResultsDisplay.tsx: This is the main content area where all the analysis results will be rendered. It will conditionally display the data table, charts, and the final report.

DataTable.tsx: A component to present the processed data in a clean, interactive table.

Chart.tsx: A component that takes the visualization code or data from the backend and renders it as an actual chart. This could use a library like recharts or Chart.js.

DownloadReportButton.tsx: A button that triggers a download of the final report from the /api/report endpoint.

pages/index.tsx: The main and likely only page of your application. It will import and compose all the components above to create the complete user experience.

styles/: This folder will contain the global CSS file and any other custom styles. It will be used by Tailwind CSS to define the look and feel of the application.

utils/: This directory will hold helper functions for the frontend, such as API client wrappers to handle communication with your FastAPI backend.

Other Files
docs/: A place for your project documentation, including architectural diagrams and your Scrumban plan to track progress.

.gitignore: Specifies which files and directories (like node_modules, __pycache__, and /.env) should be ignored by Git.

README.md: The primary project documentation, describing the purpose, features, and instructions on how to set up and run the application.

LICENSE: A file containing the project's license, defining how others can use, modify, and distribute your code.