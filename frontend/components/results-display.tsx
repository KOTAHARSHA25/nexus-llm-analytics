"use client";

import { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { ChartViewer } from "@/components/chart-viewer";
import { 
  BarChart3, 
  FileText, 
  Code, 
  TrendingUp, 
  Database,
  Eye,
  BarChart
} from "lucide-react";

interface ResultsDisplayProps {
  results: any;
  isLoading: boolean;
  filename?: string;
}

export function ResultsDisplay({ results, isLoading, filename }: ResultsDisplayProps) {
  const [chartData, setChartData] = useState<any>(null);
  const [chartLoading, setChartLoading] = useState(false);
  const [showCode, setShowCode] = useState(false);

  // Auto-generate visualization when results are available
  useEffect(() => {
    if (results && results.success && filename && !chartData) {
      generateVisualization();
    }
  }, [results, filename]);

  const generateVisualization = async () => {
    if (!filename) return;

    setChartLoading(true);
    try {
      const response = await fetch("http://127.0.0.1:8000/visualize/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          data_summary: JSON.stringify(results),
          chart_type: "auto",
          filename: filename
        }),
      });

      const data = await response.json();
      setChartData(data);
    } catch (error) {
      console.error("Visualization generation failed:", error);
      setChartData({ error: "Failed to generate visualization" });
    } finally {
      setChartLoading(false);
    }
  };

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BarChart3 className="h-5 w-5" />
            Analysis Results
          </CardTitle>
          <CardDescription>
            Processing your query with AI agents...
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col items-center justify-center py-12 space-y-4">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            <p className="font-medium">AI agents are analyzing your data...</p>
            <p className="text-sm text-muted-foreground">This may take a moment</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!results) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BarChart3 className="h-5 w-5" />
            Analysis Results
          </CardTitle>
          <CardDescription>
            Your AI-powered analysis results will appear here
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col items-center justify-center py-12 space-y-4 text-center">
            <FileText className="h-8 w-8 text-muted-foreground" />
            <p className="font-medium">Ready for Analysis</p>
            <p className="text-sm text-muted-foreground">
              Upload a file and ask a question to get started
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  // Handle error results
  if (results.error) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="text-destructive">Analysis Error</CardTitle>
          <CardDescription>
            The AI agents encountered an issue
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="bg-destructive/10 border border-destructive/20 rounded-lg p-4">
            <p className="text-sm text-destructive">{results.error}</p>
            {results.suggestion && (
              <p className="text-sm text-muted-foreground mt-2">
                Suggestion: {results.suggestion}
              </p>
            )}
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Main Analysis Results */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5" />
                Analysis Results
                <Badge variant="secondary" className="text-xs">
                  {results.type || 'AI Generated'}
                </Badge>
              </CardTitle>
              <CardDescription>
                Generated by our multi-agent AI system
              </CardDescription>
            </div>
            {results.execution_time && (
              <Badge variant="outline" className="text-xs">
                {results.execution_time.toFixed(2)}s
              </Badge>
            )}
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Display the main result */}
          <div className="prose prose-sm max-w-none">
            <p className="text-foreground leading-relaxed">
              {typeof results.result === 'string' 
                ? results.result 
                : JSON.stringify(results.result, null, 2)}
            </p>
          </div>

          {/* Show structured data if available */}
          {results.preview && (
            <div className="space-y-2">
              <h4 className="text-sm font-medium flex items-center gap-2">
                <Eye className="h-4 w-4" />
                Data Preview
              </h4>
              <div className="bg-muted/50 rounded-lg p-3 overflow-x-auto">
                <Table className="text-xs">
                  <TableHeader>
                    <TableRow>
                      {Object.keys(results.preview[0] || {}).map((key) => (
                        <TableHead key={key} className="text-xs">
                          {key}
                        </TableHead>
                      ))}
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {results.preview.slice(0, 5).map((row: any, index: number) => (
                      <TableRow key={index}>
                        {Object.values(row).map((value: any, i: number) => (
                          <TableCell key={i} className="text-xs">
                            {String(value)}
                          </TableCell>
                        ))}
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </div>
          )}

          {/* Code section */}
          {(results.code || results.generated_code) && (
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <h4 className="text-sm font-medium flex items-center gap-2">
                  <Code className="h-4 w-4" />
                  Generated Code
                </h4>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowCode(!showCode)}
                >
                  {showCode ? 'Hide' : 'Show'} Code
                </Button>
              </div>
              {showCode && (
                <pre className="bg-muted rounded-lg p-3 text-xs overflow-x-auto">
                  <code>{results.code || results.generated_code}</code>
                </pre>
              )}
            </div>
          )}

          {/* Explanation */}
          {results.explanation && (
            <div className="space-y-2">
              <h4 className="text-sm font-medium">Explanation</h4>
              <p className="text-sm text-muted-foreground">
                {results.explanation}
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Data Statistics */}
      {(results.describe || results.value_counts || results.filtered_count !== undefined) && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Database className="h-5 w-5" />
              Data Statistics
            </CardTitle>
          </CardHeader>
          <CardContent>
            {results.describe && (
              <div className="space-y-2">
                <h4 className="text-sm font-medium">Summary Statistics</h4>
                <div className="bg-muted/50 rounded-lg p-3 overflow-x-auto">
                  <Table className="text-xs">
                    <TableHeader>
                      <TableRow>
                        <TableHead className="text-xs">Statistic</TableHead>
                        {Object.keys(Object.values(results.describe)[0] || {}).map((col) => (
                          <TableHead key={col} className="text-xs">{col}</TableHead>
                        ))}
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {Object.entries(results.describe).map(([stat, values]: [string, any]) => (
                        <TableRow key={stat}>
                          <TableCell className="font-medium text-xs">{stat}</TableCell>
                          {Object.values(values).map((value: any, i: number) => (
                            <TableCell key={i} className="text-xs">
                              {typeof value === 'number' ? value.toFixed(2) : String(value)}
                            </TableCell>
                          ))}
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </div>
            )}

            {results.value_counts && (
              <div className="space-y-2">
                <h4 className="text-sm font-medium">Value Counts</h4>
                <div className="bg-muted/50 rounded-lg p-3">
                  <Table className="text-xs">
                    <TableHeader>
                      <TableRow>
                        <TableHead className="text-xs">Value</TableHead>
                        <TableHead className="text-xs">Count</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {Object.entries(results.value_counts).map(([value, count]) => (
                        <TableRow key={value}>
                          <TableCell className="text-xs">{value}</TableCell>
                          <TableCell className="text-xs">{String(count)}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </div>
            )}

            {results.filtered_count !== undefined && (
              <div className="space-y-2">
                <h4 className="text-sm font-medium">Filter Results</h4>
                <Badge variant="outline">
                  {results.filtered_count} rows match the filter
                </Badge>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Visualization */}
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold flex items-center gap-2">
            <BarChart className="h-5 w-5" />
            Data Visualization
          </h3>
          <Button
            variant="outline"
            size="sm"
            onClick={generateVisualization}
            disabled={chartLoading || !filename}
          >
            {chartLoading ? "Generating..." : "Regenerate Chart"}
          </Button>
        </div>
        
        <ChartViewer
          chartData={chartData}
          isLoading={chartLoading}
          error={chartData?.error}
        />
      </div>
    </div>
  );
}
